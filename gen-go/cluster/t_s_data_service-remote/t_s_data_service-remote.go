// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "github.com/apache/thrift/lib/go/thrift"
	"rpc"
        "cluster"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  long querySingleSeries(SingleSeriesQueryRequest request)")
  fmt.Fprintln(os.Stderr, "  string fetchSingleSeries(Node header, long readerId)")
  fmt.Fprintln(os.Stderr, "  long querySingleSeriesByTimestamp(SingleSeriesQueryRequest request)")
  fmt.Fprintln(os.Stderr, "  string fetchSingleSeriesByTimestamp(Node header, long readerId, long timestamp)")
  fmt.Fprintln(os.Stderr, "  void endQuery(Node header, Node thisNode, long queryId)")
  fmt.Fprintln(os.Stderr, "  GetAllPathsResult getAllPaths(Node header,  path, bool withAlias)")
  fmt.Fprintln(os.Stderr, "   getAllDevices(Node header,  path)")
  fmt.Fprintln(os.Stderr, "   getNodeList(Node header, string path, int nodeLevel)")
  fmt.Fprintln(os.Stderr, "   getChildNodePathInNextLevel(Node header, string path)")
  fmt.Fprintln(os.Stderr, "  string getAllMeasurementSchema(Node header, string planBinary)")
  fmt.Fprintln(os.Stderr, "   getAggrResult(GetAggrResultRequest request)")
  fmt.Fprintln(os.Stderr, "   getUnregisteredTimeseries(Node header,  timeseriesList)")
  fmt.Fprintln(os.Stderr, "  PullSnapshotResp pullSnapshot(PullSnapshotRequest request)")
  fmt.Fprintln(os.Stderr, "  long getGroupByExecutor(GroupByRequest request)")
  fmt.Fprintln(os.Stderr, "   getGroupByResult(Node header, long executorId, long startTime, long endTime)")
  fmt.Fprintln(os.Stderr, "  PullSchemaResp pullTimeSeriesSchema(PullSchemaRequest request)")
  fmt.Fprintln(os.Stderr, "  PullSchemaResp pullMeasurementSchema(PullSchemaRequest request)")
  fmt.Fprintln(os.Stderr, "  string previousFill(PreviousFillRequest request)")
  fmt.Fprintln(os.Stderr, "  string last(LastQueryRequest request)")
  fmt.Fprintln(os.Stderr, "  int getPathCount(Node header,  pathsToQuery, int level)")
  fmt.Fprintln(os.Stderr, "  bool onSnapshotApplied(Node header,  slots)")
  fmt.Fprintln(os.Stderr, "  string peekNextNotNullValue(Node header, long executorId, long startTime, long endTime)")
  fmt.Fprintln(os.Stderr, "  HeartBeatResponse sendHeartbeat(HeartBeatRequest request)")
  fmt.Fprintln(os.Stderr, "  long startElection(ElectionRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntries(AppendEntriesRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntry(AppendEntryRequest request)")
  fmt.Fprintln(os.Stderr, "  void sendSnapshot(SendSnapshotRequest request)")
  fmt.Fprintln(os.Stderr, "  TSStatus executeNonQueryPlan(ExecutNonQueryReq request)")
  fmt.Fprintln(os.Stderr, "  long requestCommitIndex(Node header)")
  fmt.Fprintln(os.Stderr, "  string readFile(string filePath, long offset, int length)")
  fmt.Fprintln(os.Stderr, "  bool matchTerm(long index, long term, Node header)")
  fmt.Fprintln(os.Stderr, "  void removeHardLink(string hardLinkPath)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := cluster.NewTSDataServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "querySingleSeries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QuerySingleSeries requires 1 args")
      flag.Usage()
    }
    arg151 := flag.Arg(1)
    mbTrans152 := thrift.NewTMemoryBufferLen(len(arg151))
    defer mbTrans152.Close()
    _, err153 := mbTrans152.WriteString(arg151)
    if err153 != nil {
      Usage()
      return
    }
    factory154 := thrift.NewTJSONProtocolFactory()
    jsProt155 := factory154.GetProtocol(mbTrans152)
    argvalue0 := cluster.NewSingleSeriesQueryRequest()
    err156 := argvalue0.Read(jsProt155)
    if err156 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QuerySingleSeries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchSingleSeries":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchSingleSeries requires 2 args")
      flag.Usage()
    }
    arg157 := flag.Arg(1)
    mbTrans158 := thrift.NewTMemoryBufferLen(len(arg157))
    defer mbTrans158.Close()
    _, err159 := mbTrans158.WriteString(arg157)
    if err159 != nil {
      Usage()
      return
    }
    factory160 := thrift.NewTJSONProtocolFactory()
    jsProt161 := factory160.GetProtocol(mbTrans158)
    argvalue0 := cluster.NewNode()
    err162 := argvalue0.Read(jsProt161)
    if err162 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err163 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err163 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    fmt.Print(client.FetchSingleSeries(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "querySingleSeriesByTimestamp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QuerySingleSeriesByTimestamp requires 1 args")
      flag.Usage()
    }
    arg164 := flag.Arg(1)
    mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
    defer mbTrans165.Close()
    _, err166 := mbTrans165.WriteString(arg164)
    if err166 != nil {
      Usage()
      return
    }
    factory167 := thrift.NewTJSONProtocolFactory()
    jsProt168 := factory167.GetProtocol(mbTrans165)
    argvalue0 := cluster.NewSingleSeriesQueryRequest()
    err169 := argvalue0.Read(jsProt168)
    if err169 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QuerySingleSeriesByTimestamp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchSingleSeriesByTimestamp":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FetchSingleSeriesByTimestamp requires 3 args")
      flag.Usage()
    }
    arg170 := flag.Arg(1)
    mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
    defer mbTrans171.Close()
    _, err172 := mbTrans171.WriteString(arg170)
    if err172 != nil {
      Usage()
      return
    }
    factory173 := thrift.NewTJSONProtocolFactory()
    jsProt174 := factory173.GetProtocol(mbTrans171)
    argvalue0 := cluster.NewNode()
    err175 := argvalue0.Read(jsProt174)
    if err175 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err176 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err176 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    argvalue2, err177 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err177 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    fmt.Print(client.FetchSingleSeriesByTimestamp(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "endQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "EndQuery requires 3 args")
      flag.Usage()
    }
    arg178 := flag.Arg(1)
    mbTrans179 := thrift.NewTMemoryBufferLen(len(arg178))
    defer mbTrans179.Close()
    _, err180 := mbTrans179.WriteString(arg178)
    if err180 != nil {
      Usage()
      return
    }
    factory181 := thrift.NewTJSONProtocolFactory()
    jsProt182 := factory181.GetProtocol(mbTrans179)
    argvalue0 := cluster.NewNode()
    err183 := argvalue0.Read(jsProt182)
    if err183 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg184 := flag.Arg(2)
    mbTrans185 := thrift.NewTMemoryBufferLen(len(arg184))
    defer mbTrans185.Close()
    _, err186 := mbTrans185.WriteString(arg184)
    if err186 != nil {
      Usage()
      return
    }
    factory187 := thrift.NewTJSONProtocolFactory()
    jsProt188 := factory187.GetProtocol(mbTrans185)
    argvalue1 := cluster.NewNode()
    err189 := argvalue1.Read(jsProt188)
    if err189 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err190 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err190 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    fmt.Print(client.EndQuery(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllPaths":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetAllPaths requires 3 args")
      flag.Usage()
    }
    arg191 := flag.Arg(1)
    mbTrans192 := thrift.NewTMemoryBufferLen(len(arg191))
    defer mbTrans192.Close()
    _, err193 := mbTrans192.WriteString(arg191)
    if err193 != nil {
      Usage()
      return
    }
    factory194 := thrift.NewTJSONProtocolFactory()
    jsProt195 := factory194.GetProtocol(mbTrans192)
    argvalue0 := cluster.NewNode()
    err196 := argvalue0.Read(jsProt195)
    if err196 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg197 := flag.Arg(2)
    mbTrans198 := thrift.NewTMemoryBufferLen(len(arg197))
    defer mbTrans198.Close()
    _, err199 := mbTrans198.WriteString(arg197)
    if err199 != nil { 
      Usage()
      return
    }
    factory200 := thrift.NewTJSONProtocolFactory()
    jsProt201 := factory200.GetProtocol(mbTrans198)
    containerStruct1 := cluster.NewTSDataServiceGetAllPathsArgs()
    err202 := containerStruct1.ReadField2(jsProt201)
    if err202 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Path
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.GetAllPaths(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllDevices":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllDevices requires 2 args")
      flag.Usage()
    }
    arg204 := flag.Arg(1)
    mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
    defer mbTrans205.Close()
    _, err206 := mbTrans205.WriteString(arg204)
    if err206 != nil {
      Usage()
      return
    }
    factory207 := thrift.NewTJSONProtocolFactory()
    jsProt208 := factory207.GetProtocol(mbTrans205)
    argvalue0 := cluster.NewNode()
    err209 := argvalue0.Read(jsProt208)
    if err209 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg210 := flag.Arg(2)
    mbTrans211 := thrift.NewTMemoryBufferLen(len(arg210))
    defer mbTrans211.Close()
    _, err212 := mbTrans211.WriteString(arg210)
    if err212 != nil { 
      Usage()
      return
    }
    factory213 := thrift.NewTJSONProtocolFactory()
    jsProt214 := factory213.GetProtocol(mbTrans211)
    containerStruct1 := cluster.NewTSDataServiceGetAllDevicesArgs()
    err215 := containerStruct1.ReadField2(jsProt214)
    if err215 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Path
    value1 := argvalue1
    fmt.Print(client.GetAllDevices(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNodeList":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNodeList requires 3 args")
      flag.Usage()
    }
    arg216 := flag.Arg(1)
    mbTrans217 := thrift.NewTMemoryBufferLen(len(arg216))
    defer mbTrans217.Close()
    _, err218 := mbTrans217.WriteString(arg216)
    if err218 != nil {
      Usage()
      return
    }
    factory219 := thrift.NewTJSONProtocolFactory()
    jsProt220 := factory219.GetProtocol(mbTrans217)
    argvalue0 := cluster.NewNode()
    err221 := argvalue0.Read(jsProt220)
    if err221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err223 := (strconv.Atoi(flag.Arg(3)))
    if err223 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := cluster.Int(argvalue2)
    fmt.Print(client.GetNodeList(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getChildNodePathInNextLevel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChildNodePathInNextLevel requires 2 args")
      flag.Usage()
    }
    arg224 := flag.Arg(1)
    mbTrans225 := thrift.NewTMemoryBufferLen(len(arg224))
    defer mbTrans225.Close()
    _, err226 := mbTrans225.WriteString(arg224)
    if err226 != nil {
      Usage()
      return
    }
    factory227 := thrift.NewTJSONProtocolFactory()
    jsProt228 := factory227.GetProtocol(mbTrans225)
    argvalue0 := cluster.NewNode()
    err229 := argvalue0.Read(jsProt228)
    if err229 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChildNodePathInNextLevel(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllMeasurementSchema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllMeasurementSchema requires 2 args")
      flag.Usage()
    }
    arg231 := flag.Arg(1)
    mbTrans232 := thrift.NewTMemoryBufferLen(len(arg231))
    defer mbTrans232.Close()
    _, err233 := mbTrans232.WriteString(arg231)
    if err233 != nil {
      Usage()
      return
    }
    factory234 := thrift.NewTJSONProtocolFactory()
    jsProt235 := factory234.GetProtocol(mbTrans232)
    argvalue0 := cluster.NewNode()
    err236 := argvalue0.Read(jsProt235)
    if err236 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.GetAllMeasurementSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAggrResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAggrResult_ requires 1 args")
      flag.Usage()
    }
    arg238 := flag.Arg(1)
    mbTrans239 := thrift.NewTMemoryBufferLen(len(arg238))
    defer mbTrans239.Close()
    _, err240 := mbTrans239.WriteString(arg238)
    if err240 != nil {
      Usage()
      return
    }
    factory241 := thrift.NewTJSONProtocolFactory()
    jsProt242 := factory241.GetProtocol(mbTrans239)
    argvalue0 := cluster.NewGetAggrResultRequest()
    err243 := argvalue0.Read(jsProt242)
    if err243 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAggrResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUnregisteredTimeseries":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUnregisteredTimeseries requires 2 args")
      flag.Usage()
    }
    arg244 := flag.Arg(1)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue0 := cluster.NewNode()
    err249 := argvalue0.Read(jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg250 := flag.Arg(2)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil { 
      Usage()
      return
    }
    factory253 := thrift.NewTJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    containerStruct1 := cluster.NewTSDataServiceGetUnregisteredTimeseriesArgs()
    err255 := containerStruct1.ReadField2(jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TimeseriesList
    value1 := argvalue1
    fmt.Print(client.GetUnregisteredTimeseries(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pullSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PullSnapshot requires 1 args")
      flag.Usage()
    }
    arg256 := flag.Arg(1)
    mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
    defer mbTrans257.Close()
    _, err258 := mbTrans257.WriteString(arg256)
    if err258 != nil {
      Usage()
      return
    }
    factory259 := thrift.NewTJSONProtocolFactory()
    jsProt260 := factory259.GetProtocol(mbTrans257)
    argvalue0 := cluster.NewPullSnapshotRequest()
    err261 := argvalue0.Read(jsProt260)
    if err261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PullSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupByExecutor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupByExecutor requires 1 args")
      flag.Usage()
    }
    arg262 := flag.Arg(1)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil {
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    argvalue0 := cluster.NewGroupByRequest()
    err267 := argvalue0.Read(jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGroupByExecutor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupByResult":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetGroupByResult_ requires 4 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := cluster.NewNode()
    err273 := argvalue0.Read(jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err274 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err274 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    argvalue2, err275 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err275 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    argvalue3, err276 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err276 != nil {
      Usage()
      return
    }
    value3 := cluster.Long(argvalue3)
    fmt.Print(client.GetGroupByResult_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "pullTimeSeriesSchema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PullTimeSeriesSchema requires 1 args")
      flag.Usage()
    }
    arg277 := flag.Arg(1)
    mbTrans278 := thrift.NewTMemoryBufferLen(len(arg277))
    defer mbTrans278.Close()
    _, err279 := mbTrans278.WriteString(arg277)
    if err279 != nil {
      Usage()
      return
    }
    factory280 := thrift.NewTJSONProtocolFactory()
    jsProt281 := factory280.GetProtocol(mbTrans278)
    argvalue0 := cluster.NewPullSchemaRequest()
    err282 := argvalue0.Read(jsProt281)
    if err282 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PullTimeSeriesSchema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "pullMeasurementSchema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PullMeasurementSchema requires 1 args")
      flag.Usage()
    }
    arg283 := flag.Arg(1)
    mbTrans284 := thrift.NewTMemoryBufferLen(len(arg283))
    defer mbTrans284.Close()
    _, err285 := mbTrans284.WriteString(arg283)
    if err285 != nil {
      Usage()
      return
    }
    factory286 := thrift.NewTJSONProtocolFactory()
    jsProt287 := factory286.GetProtocol(mbTrans284)
    argvalue0 := cluster.NewPullSchemaRequest()
    err288 := argvalue0.Read(jsProt287)
    if err288 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PullMeasurementSchema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "previousFill":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreviousFill requires 1 args")
      flag.Usage()
    }
    arg289 := flag.Arg(1)
    mbTrans290 := thrift.NewTMemoryBufferLen(len(arg289))
    defer mbTrans290.Close()
    _, err291 := mbTrans290.WriteString(arg289)
    if err291 != nil {
      Usage()
      return
    }
    factory292 := thrift.NewTJSONProtocolFactory()
    jsProt293 := factory292.GetProtocol(mbTrans290)
    argvalue0 := cluster.NewPreviousFillRequest()
    err294 := argvalue0.Read(jsProt293)
    if err294 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PreviousFill(context.Background(), value0))
    fmt.Print("\n")
    break
  case "last":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Last requires 1 args")
      flag.Usage()
    }
    arg295 := flag.Arg(1)
    mbTrans296 := thrift.NewTMemoryBufferLen(len(arg295))
    defer mbTrans296.Close()
    _, err297 := mbTrans296.WriteString(arg295)
    if err297 != nil {
      Usage()
      return
    }
    factory298 := thrift.NewTJSONProtocolFactory()
    jsProt299 := factory298.GetProtocol(mbTrans296)
    argvalue0 := cluster.NewLastQueryRequest()
    err300 := argvalue0.Read(jsProt299)
    if err300 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Last(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPathCount":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPathCount requires 3 args")
      flag.Usage()
    }
    arg301 := flag.Arg(1)
    mbTrans302 := thrift.NewTMemoryBufferLen(len(arg301))
    defer mbTrans302.Close()
    _, err303 := mbTrans302.WriteString(arg301)
    if err303 != nil {
      Usage()
      return
    }
    factory304 := thrift.NewTJSONProtocolFactory()
    jsProt305 := factory304.GetProtocol(mbTrans302)
    argvalue0 := cluster.NewNode()
    err306 := argvalue0.Read(jsProt305)
    if err306 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg307 := flag.Arg(2)
    mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
    defer mbTrans308.Close()
    _, err309 := mbTrans308.WriteString(arg307)
    if err309 != nil { 
      Usage()
      return
    }
    factory310 := thrift.NewTJSONProtocolFactory()
    jsProt311 := factory310.GetProtocol(mbTrans308)
    containerStruct1 := cluster.NewTSDataServiceGetPathCountArgs()
    err312 := containerStruct1.ReadField2(jsProt311)
    if err312 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PathsToQuery
    value1 := argvalue1
    tmp2, err313 := (strconv.Atoi(flag.Arg(3)))
    if err313 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := cluster.Int(argvalue2)
    fmt.Print(client.GetPathCount(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "onSnapshotApplied":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OnSnapshotApplied requires 2 args")
      flag.Usage()
    }
    arg314 := flag.Arg(1)
    mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
    defer mbTrans315.Close()
    _, err316 := mbTrans315.WriteString(arg314)
    if err316 != nil {
      Usage()
      return
    }
    factory317 := thrift.NewTJSONProtocolFactory()
    jsProt318 := factory317.GetProtocol(mbTrans315)
    argvalue0 := cluster.NewNode()
    err319 := argvalue0.Read(jsProt318)
    if err319 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg320 := flag.Arg(2)
    mbTrans321 := thrift.NewTMemoryBufferLen(len(arg320))
    defer mbTrans321.Close()
    _, err322 := mbTrans321.WriteString(arg320)
    if err322 != nil { 
      Usage()
      return
    }
    factory323 := thrift.NewTJSONProtocolFactory()
    jsProt324 := factory323.GetProtocol(mbTrans321)
    containerStruct1 := cluster.NewTSDataServiceOnSnapshotAppliedArgs()
    err325 := containerStruct1.ReadField2(jsProt324)
    if err325 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Slots
    value1 := argvalue1
    fmt.Print(client.OnSnapshotApplied(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "peekNextNotNullValue":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "PeekNextNotNullValue requires 4 args")
      flag.Usage()
    }
    arg326 := flag.Arg(1)
    mbTrans327 := thrift.NewTMemoryBufferLen(len(arg326))
    defer mbTrans327.Close()
    _, err328 := mbTrans327.WriteString(arg326)
    if err328 != nil {
      Usage()
      return
    }
    factory329 := thrift.NewTJSONProtocolFactory()
    jsProt330 := factory329.GetProtocol(mbTrans327)
    argvalue0 := cluster.NewNode()
    err331 := argvalue0.Read(jsProt330)
    if err331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err332 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err332 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    argvalue2, err333 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err333 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    argvalue3, err334 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err334 != nil {
      Usage()
      return
    }
    value3 := cluster.Long(argvalue3)
    fmt.Print(client.PeekNextNotNullValue(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendHeartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendHeartbeat requires 1 args")
      flag.Usage()
    }
    arg335 := flag.Arg(1)
    mbTrans336 := thrift.NewTMemoryBufferLen(len(arg335))
    defer mbTrans336.Close()
    _, err337 := mbTrans336.WriteString(arg335)
    if err337 != nil {
      Usage()
      return
    }
    factory338 := thrift.NewTJSONProtocolFactory()
    jsProt339 := factory338.GetProtocol(mbTrans336)
    argvalue0 := cluster.NewHeartBeatRequest()
    err340 := argvalue0.Read(jsProt339)
    if err340 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendHeartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startElection":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartElection requires 1 args")
      flag.Usage()
    }
    arg341 := flag.Arg(1)
    mbTrans342 := thrift.NewTMemoryBufferLen(len(arg341))
    defer mbTrans342.Close()
    _, err343 := mbTrans342.WriteString(arg341)
    if err343 != nil {
      Usage()
      return
    }
    factory344 := thrift.NewTJSONProtocolFactory()
    jsProt345 := factory344.GetProtocol(mbTrans342)
    argvalue0 := cluster.NewElectionRequest()
    err346 := argvalue0.Read(jsProt345)
    if err346 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartElection(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntries requires 1 args")
      flag.Usage()
    }
    arg347 := flag.Arg(1)
    mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
    defer mbTrans348.Close()
    _, err349 := mbTrans348.WriteString(arg347)
    if err349 != nil {
      Usage()
      return
    }
    factory350 := thrift.NewTJSONProtocolFactory()
    jsProt351 := factory350.GetProtocol(mbTrans348)
    argvalue0 := cluster.NewAppendEntriesRequest()
    err352 := argvalue0.Read(jsProt351)
    if err352 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntry":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntry requires 1 args")
      flag.Usage()
    }
    arg353 := flag.Arg(1)
    mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil {
      Usage()
      return
    }
    factory356 := thrift.NewTJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    argvalue0 := cluster.NewAppendEntryRequest()
    err358 := argvalue0.Read(jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntry(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSnapshot requires 1 args")
      flag.Usage()
    }
    arg359 := flag.Arg(1)
    mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
    defer mbTrans360.Close()
    _, err361 := mbTrans360.WriteString(arg359)
    if err361 != nil {
      Usage()
      return
    }
    factory362 := thrift.NewTJSONProtocolFactory()
    jsProt363 := factory362.GetProtocol(mbTrans360)
    argvalue0 := cluster.NewSendSnapshotRequest()
    err364 := argvalue0.Read(jsProt363)
    if err364 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeNonQueryPlan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteNonQueryPlan requires 1 args")
      flag.Usage()
    }
    arg365 := flag.Arg(1)
    mbTrans366 := thrift.NewTMemoryBufferLen(len(arg365))
    defer mbTrans366.Close()
    _, err367 := mbTrans366.WriteString(arg365)
    if err367 != nil {
      Usage()
      return
    }
    factory368 := thrift.NewTJSONProtocolFactory()
    jsProt369 := factory368.GetProtocol(mbTrans366)
    argvalue0 := cluster.NewExecutNonQueryReq()
    err370 := argvalue0.Read(jsProt369)
    if err370 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteNonQueryPlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestCommitIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCommitIndex requires 1 args")
      flag.Usage()
    }
    arg371 := flag.Arg(1)
    mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
    defer mbTrans372.Close()
    _, err373 := mbTrans372.WriteString(arg371)
    if err373 != nil {
      Usage()
      return
    }
    factory374 := thrift.NewTJSONProtocolFactory()
    jsProt375 := factory374.GetProtocol(mbTrans372)
    argvalue0 := cluster.NewNode()
    err376 := argvalue0.Read(jsProt375)
    if err376 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestCommitIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "readFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReadFile requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err378 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err378 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    tmp2, err379 := (strconv.Atoi(flag.Arg(3)))
    if err379 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := cluster.Int(argvalue2)
    fmt.Print(client.ReadFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "matchTerm":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MatchTerm requires 3 args")
      flag.Usage()
    }
    argvalue0, err380 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err380 != nil {
      Usage()
      return
    }
    value0 := cluster.Long(argvalue0)
    argvalue1, err381 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err381 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    arg382 := flag.Arg(3)
    mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil {
      Usage()
      return
    }
    factory385 := thrift.NewTJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    argvalue2 := cluster.NewNode()
    err387 := argvalue2.Read(jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.MatchTerm(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "removeHardLink":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveHardLink requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveHardLink(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
