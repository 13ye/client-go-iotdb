// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "github.com/apache/thrift/lib/go/thrift"
	"rpc"
        "cluster"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  AddNodeResponse addNode(Node node, StartUpStatus startUpStatus)")
  fmt.Fprintln(os.Stderr, "  CheckStatusResponse checkStatus(StartUpStatus startUpStatus)")
  fmt.Fprintln(os.Stderr, "  long removeNode(Node node)")
  fmt.Fprintln(os.Stderr, "  void exile()")
  fmt.Fprintln(os.Stderr, "  TNodeStatus queryNodeStatus()")
  fmt.Fprintln(os.Stderr, "  Node checkAlive()")
  fmt.Fprintln(os.Stderr, "  HeartBeatResponse sendHeartbeat(HeartBeatRequest request)")
  fmt.Fprintln(os.Stderr, "  long startElection(ElectionRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntries(AppendEntriesRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntry(AppendEntryRequest request)")
  fmt.Fprintln(os.Stderr, "  void sendSnapshot(SendSnapshotRequest request)")
  fmt.Fprintln(os.Stderr, "  TSStatus executeNonQueryPlan(ExecutNonQueryReq request)")
  fmt.Fprintln(os.Stderr, "  long requestCommitIndex(Node header)")
  fmt.Fprintln(os.Stderr, "  string readFile(string filePath, long offset, int length)")
  fmt.Fprintln(os.Stderr, "  bool matchTerm(long index, long term, Node header)")
  fmt.Fprintln(os.Stderr, "  void removeHardLink(string hardLinkPath)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := cluster.NewTSMetaServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "addNode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddNode requires 2 args")
      flag.Usage()
    }
    arg402 := flag.Arg(1)
    mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
    defer mbTrans403.Close()
    _, err404 := mbTrans403.WriteString(arg402)
    if err404 != nil {
      Usage()
      return
    }
    factory405 := thrift.NewTJSONProtocolFactory()
    jsProt406 := factory405.GetProtocol(mbTrans403)
    argvalue0 := cluster.NewNode()
    err407 := argvalue0.Read(jsProt406)
    if err407 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg408 := flag.Arg(2)
    mbTrans409 := thrift.NewTMemoryBufferLen(len(arg408))
    defer mbTrans409.Close()
    _, err410 := mbTrans409.WriteString(arg408)
    if err410 != nil {
      Usage()
      return
    }
    factory411 := thrift.NewTJSONProtocolFactory()
    jsProt412 := factory411.GetProtocol(mbTrans409)
    argvalue1 := cluster.NewStartUpStatus()
    err413 := argvalue1.Read(jsProt412)
    if err413 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddNode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckStatus requires 1 args")
      flag.Usage()
    }
    arg414 := flag.Arg(1)
    mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
    defer mbTrans415.Close()
    _, err416 := mbTrans415.WriteString(arg414)
    if err416 != nil {
      Usage()
      return
    }
    factory417 := thrift.NewTJSONProtocolFactory()
    jsProt418 := factory417.GetProtocol(mbTrans415)
    argvalue0 := cluster.NewStartUpStatus()
    err419 := argvalue0.Read(jsProt418)
    if err419 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeNode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveNode requires 1 args")
      flag.Usage()
    }
    arg420 := flag.Arg(1)
    mbTrans421 := thrift.NewTMemoryBufferLen(len(arg420))
    defer mbTrans421.Close()
    _, err422 := mbTrans421.WriteString(arg420)
    if err422 != nil {
      Usage()
      return
    }
    factory423 := thrift.NewTJSONProtocolFactory()
    jsProt424 := factory423.GetProtocol(mbTrans421)
    argvalue0 := cluster.NewNode()
    err425 := argvalue0.Read(jsProt424)
    if err425 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveNode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Exile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Exile(context.Background()))
    fmt.Print("\n")
    break
  case "queryNodeStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "QueryNodeStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.QueryNodeStatus(context.Background()))
    fmt.Print("\n")
    break
  case "checkAlive":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CheckAlive requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CheckAlive(context.Background()))
    fmt.Print("\n")
    break
  case "sendHeartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendHeartbeat requires 1 args")
      flag.Usage()
    }
    arg426 := flag.Arg(1)
    mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
    defer mbTrans427.Close()
    _, err428 := mbTrans427.WriteString(arg426)
    if err428 != nil {
      Usage()
      return
    }
    factory429 := thrift.NewTJSONProtocolFactory()
    jsProt430 := factory429.GetProtocol(mbTrans427)
    argvalue0 := cluster.NewHeartBeatRequest()
    err431 := argvalue0.Read(jsProt430)
    if err431 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendHeartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startElection":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartElection requires 1 args")
      flag.Usage()
    }
    arg432 := flag.Arg(1)
    mbTrans433 := thrift.NewTMemoryBufferLen(len(arg432))
    defer mbTrans433.Close()
    _, err434 := mbTrans433.WriteString(arg432)
    if err434 != nil {
      Usage()
      return
    }
    factory435 := thrift.NewTJSONProtocolFactory()
    jsProt436 := factory435.GetProtocol(mbTrans433)
    argvalue0 := cluster.NewElectionRequest()
    err437 := argvalue0.Read(jsProt436)
    if err437 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartElection(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntries requires 1 args")
      flag.Usage()
    }
    arg438 := flag.Arg(1)
    mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
    defer mbTrans439.Close()
    _, err440 := mbTrans439.WriteString(arg438)
    if err440 != nil {
      Usage()
      return
    }
    factory441 := thrift.NewTJSONProtocolFactory()
    jsProt442 := factory441.GetProtocol(mbTrans439)
    argvalue0 := cluster.NewAppendEntriesRequest()
    err443 := argvalue0.Read(jsProt442)
    if err443 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntry":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntry requires 1 args")
      flag.Usage()
    }
    arg444 := flag.Arg(1)
    mbTrans445 := thrift.NewTMemoryBufferLen(len(arg444))
    defer mbTrans445.Close()
    _, err446 := mbTrans445.WriteString(arg444)
    if err446 != nil {
      Usage()
      return
    }
    factory447 := thrift.NewTJSONProtocolFactory()
    jsProt448 := factory447.GetProtocol(mbTrans445)
    argvalue0 := cluster.NewAppendEntryRequest()
    err449 := argvalue0.Read(jsProt448)
    if err449 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntry(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSnapshot requires 1 args")
      flag.Usage()
    }
    arg450 := flag.Arg(1)
    mbTrans451 := thrift.NewTMemoryBufferLen(len(arg450))
    defer mbTrans451.Close()
    _, err452 := mbTrans451.WriteString(arg450)
    if err452 != nil {
      Usage()
      return
    }
    factory453 := thrift.NewTJSONProtocolFactory()
    jsProt454 := factory453.GetProtocol(mbTrans451)
    argvalue0 := cluster.NewSendSnapshotRequest()
    err455 := argvalue0.Read(jsProt454)
    if err455 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeNonQueryPlan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteNonQueryPlan requires 1 args")
      flag.Usage()
    }
    arg456 := flag.Arg(1)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil {
      Usage()
      return
    }
    factory459 := thrift.NewTJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    argvalue0 := cluster.NewExecutNonQueryReq()
    err461 := argvalue0.Read(jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteNonQueryPlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestCommitIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCommitIndex requires 1 args")
      flag.Usage()
    }
    arg462 := flag.Arg(1)
    mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
    defer mbTrans463.Close()
    _, err464 := mbTrans463.WriteString(arg462)
    if err464 != nil {
      Usage()
      return
    }
    factory465 := thrift.NewTJSONProtocolFactory()
    jsProt466 := factory465.GetProtocol(mbTrans463)
    argvalue0 := cluster.NewNode()
    err467 := argvalue0.Read(jsProt466)
    if err467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestCommitIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "readFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReadFile requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err469 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err469 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    tmp2, err470 := (strconv.Atoi(flag.Arg(3)))
    if err470 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := cluster.Int(argvalue2)
    fmt.Print(client.ReadFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "matchTerm":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MatchTerm requires 3 args")
      flag.Usage()
    }
    argvalue0, err471 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err471 != nil {
      Usage()
      return
    }
    value0 := cluster.Long(argvalue0)
    argvalue1, err472 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err472 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    arg473 := flag.Arg(3)
    mbTrans474 := thrift.NewTMemoryBufferLen(len(arg473))
    defer mbTrans474.Close()
    _, err475 := mbTrans474.WriteString(arg473)
    if err475 != nil {
      Usage()
      return
    }
    factory476 := thrift.NewTJSONProtocolFactory()
    jsProt477 := factory476.GetProtocol(mbTrans474)
    argvalue2 := cluster.NewNode()
    err478 := argvalue2.Read(jsProt477)
    if err478 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.MatchTerm(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "removeHardLink":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveHardLink requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveHardLink(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
